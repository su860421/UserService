# .github/workflows/deploy.yml
name: Deploy Laravel to EC2

on:
  push:
    branches:
      - develop

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔧 Parse Production Config
        id: config
        run: |
          # 從 PRODUCTION_ENV 中提取配置
          echo '${{ secrets.PRODUCTION_ENV }}' > /tmp/prod.env
          
          # 提取 ECR_REPOSITORY（用於構建）
          ECR_REPOSITORY=$(grep '^ECR_REPOSITORY=' /tmp/prod.env | cut -d'=' -f2)
          echo "ecr_repository=$ECR_REPOSITORY" >> $GITHUB_OUTPUT
          
          # 驗證必要的變數
          if [[ -z "$ECR_REPOSITORY" ]]; then
            echo "❌ ECR_REPOSITORY 未在 PRODUCTION_ENV 中找到"
            exit 1
          fi
          
          echo "✅ ECR_REPOSITORY: $ECR_REPOSITORY"

      - name: 🔐 Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: ✅ Verify Required Secrets
        run: |
          echo "🔍 驗證 GitHub Secrets..."
          
          if [[ -z "${{ secrets.AWS_ROLE_ARN }}" ]]; then
            echo "❌ AWS_ROLE_ARN secret 未設置"
            exit 1
          fi
          
          if [[ -z "${{ secrets.AWS_REGION }}" ]]; then
            echo "❌ AWS_REGION secret 未設置"  
            exit 1
          fi
          
          if [[ -z "${{ secrets.EC2_INSTANCE_ID }}" ]]; then
            echo "❌ EC2_INSTANCE_ID secret 未設置"
            echo "請設置: EC2_INSTANCE_ID = i-0e328a4cf501724bc"
            exit 1
          fi
          
          if [[ -z "${{ secrets.PRODUCTION_ENV }}" ]]; then
            echo "❌ PRODUCTION_ENV secret 未設置"
            exit 1
          fi
          
          echo "✅ 所有必要的 secrets 都已設置"
          echo "✅ EC2_INSTANCE_ID: ${{ secrets.EC2_INSTANCE_ID }}"
          echo "✅ AWS_REGION: ${{ secrets.AWS_REGION }}"

      - name: 🐳 Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: 🏗️ Build, Tag, and Push Image to ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ steps.config.outputs.ecr_repository }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "🏗️ 構建 Docker 映像..."
          docker build --no-cache --pull -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          
          echo "📤 推送映像到 ECR..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          
          echo "✅ 映像推送完成"
          echo "image_uri=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: 📂 Upload Production Config to EC2
        run: |
          echo "📂 上傳配置文件到 EC2..."
          
          # 將檔案內容 base64 編碼
          DOCKER_COMPOSE_B64=$(base64 -w 0 docker-compose.prod.yml)
          NGINX_CONF_B64=$(base64 -w 0 deployment/nginx.prod.conf)
          ENTRYPOINT_B64=$(base64 -w 0 deployment/docker-entrypoint.sh)
          
          # 透過 SSM 上傳配置文件
          UPLOAD_CMD_ID=$(aws ssm send-command \
            --instance-ids "${{ secrets.EC2_INSTANCE_ID }}" \
            --document-name "AWS-RunShellScript" \
            --parameters commands="[
              \"cd /opt/app\",
              \"mkdir -p deployment\",
              \"echo '$DOCKER_COMPOSE_B64' | base64 -d > docker-compose.prod.yml\",
              \"echo '$NGINX_CONF_B64' | base64 -d > deployment/nginx.prod.conf\",
              \"echo '$ENTRYPOINT_B64' | base64 -d > deployment/docker-entrypoint.sh\",
              \"chmod +x deployment/docker-entrypoint.sh\",
              \"echo '✅ 配置文件上傳完成'\"
            ]" \
            --region ${{ secrets.AWS_REGION }} \
            --output text --query 'Command.CommandId')
          
          echo "⏳ 等待配置文件上傳完成 (Command ID: $UPLOAD_CMD_ID)..."
          aws ssm wait command-executed \
            --command-id "$UPLOAD_CMD_ID" \
            --instance-id "${{ secrets.EC2_INSTANCE_ID }}" \
            --region ${{ secrets.AWS_REGION }}
          
          # 檢查上傳結果
          UPLOAD_STATUS=$(aws ssm get-command-invocation \
            --command-id "$UPLOAD_CMD_ID" \
            --instance-id "${{ secrets.EC2_INSTANCE_ID }}" \
            --region ${{ secrets.AWS_REGION }} \
            --query 'Status' --output text)
          
          if [[ "$UPLOAD_STATUS" == "Success" ]]; then
            echo "✅ 配置文件上傳成功"
          else
            echo "❌ 配置文件上傳失敗"
            aws ssm get-command-invocation \
              --command-id "$UPLOAD_CMD_ID" \
              --instance-id "${{ secrets.EC2_INSTANCE_ID }}" \
              --region ${{ secrets.AWS_REGION }} \
              --query 'StandardErrorContent' --output text
            exit 1
          fi

      - name: 🔐 Login to ECR on EC2
        run: |
          echo "🔐 在 EC2 上登入 ECR..."
          
          ECR_LOGIN_CMD_ID=$(aws ssm send-command \
            --instance-ids "${{ secrets.EC2_INSTANCE_ID }}" \
            --document-name "AWS-RunShellScript" \
            --parameters commands="[
              \"cd /opt/app\",
              \"echo '🔐 登入 ECR...'\",
              \"aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}\",
              \"echo '✅ ECR 登入完成'\"
            ]" \
            --region ${{ secrets.AWS_REGION }} \
            --output text --query 'Command.CommandId')
          
          echo "⏳ 等待 ECR 登入完成 (Command ID: $ECR_LOGIN_CMD_ID)..."
          aws ssm wait command-executed \
            --command-id "$ECR_LOGIN_CMD_ID" \
            --instance-id "${{ secrets.EC2_INSTANCE_ID }}" \
            --region ${{ secrets.AWS_REGION }}
          
          # 檢查登入結果
          LOGIN_STATUS=$(aws ssm get-command-invocation \
            --command-id "$ECR_LOGIN_CMD_ID" \
            --instance-id "${{ secrets.EC2_INSTANCE_ID }}" \
            --region ${{ secrets.AWS_REGION }} \
            --query 'Status' --output text)
          
          if [[ "$LOGIN_STATUS" == "Success" ]]; then
            echo "✅ ECR 登入成功"
          else
            echo "❌ ECR 登入失敗"
            aws ssm get-command-invocation \
              --command-id "$ECR_LOGIN_CMD_ID" \
              --instance-id "${{ secrets.EC2_INSTANCE_ID }}" \
              --region ${{ secrets.AWS_REGION }} \
              --query 'StandardErrorContent' --output text
            exit 1
          fi

      - name: ⚙️ Setup Environment Variables
        run: |
          echo "⚙️ 設置環境變數..."
          
          # 創建臨時腳本文件來處理複雜的環境變數設置
          cat > /tmp/setup-env.sh << 'SCRIPT_EOF'
          #!/bin/bash
          cd /opt/app
          echo "⚙️ 設置環境變數..."
          
          # 創建 .env 文件
          cat > .env << 'ENV_EOF'
          ${{ secrets.PRODUCTION_ENV }}
          
          # Docker 映像資訊
          ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY=${{ steps.config.outputs.ecr_repository }}
          IMAGE_TAG=${{ github.sha }}
          ENV_EOF
          
          echo "✅ 環境變數設置完成"
          echo "📄 .env 文件大小: $(wc -l < .env) 行"
          SCRIPT_EOF
          
          # 將腳本編碼並上傳到 EC2
          SCRIPT_B64=$(base64 -w 0 /tmp/setup-env.sh)
          
          SETUP_ENV_CMD_ID=$(aws ssm send-command \
            --instance-ids "${{ secrets.EC2_INSTANCE_ID }}" \
            --document-name "AWS-RunShellScript" \
            --parameters commands="[
              \"cd /opt/app\",
              \"echo '$SCRIPT_B64' | base64 -d > setup-env.sh\",
              \"chmod +x setup-env.sh\",
              \"./setup-env.sh\",
              \"rm setup-env.sh\"
            ]" \
            --region ${{ secrets.AWS_REGION }} \
            --output text --query 'Command.CommandId')
          
          echo "⏳ 等待環境變數設置完成 (Command ID: $SETUP_ENV_CMD_ID)..."
          aws ssm wait command-executed \
            --command-id "$SETUP_ENV_CMD_ID" \
            --instance-id "${{ secrets.EC2_INSTANCE_ID }}" \
            --region ${{ secrets.AWS_REGION }}
          
          # 檢查設置結果
          ENV_STATUS=$(aws ssm get-command-invocation \
            --command-id "$SETUP_ENV_CMD_ID" \
            --instance-id "${{ secrets.EC2_INSTANCE_ID }}" \
            --region ${{ secrets.AWS_REGION }} \
            --query 'Status' --output text)
          
          if [[ "$ENV_STATUS" == "Success" ]]; then
            echo "✅ 環境變數設置成功"
          else
            echo "❌ 環境變數設置失敗"
            aws ssm get-command-invocation \
              --command-id "$SETUP_ENV_CMD_ID" \
              --instance-id "${{ secrets.EC2_INSTANCE_ID }}" \
              --region ${{ secrets.AWS_REGION }} \
              --query 'StandardErrorContent' --output text
            exit 1
          fi

      - name: 🔄 Deploy Application
        run: |
          echo "🔄 部署應用..."
          
          DEPLOY_CMD_ID=$(aws ssm send-command \
            --instance-ids "${{ secrets.EC2_INSTANCE_ID }}" \
            --document-name "AWS-RunShellScript" \
            --parameters commands="[
              \"cd /opt/app\",
              \"echo '📁 設置配置文件...'\",
              \"cp deployment/nginx.prod.conf nginx.conf\",
              \"cp docker-compose.prod.yml docker-compose.yml\",
              \"echo '🛑 停止現有服務...'\",
              \"docker-compose down --volumes --remove-orphans || true\",
              \"echo '📥 拉取新映像...'\",
              \"docker-compose pull\",
              \"echo '🔄 啟動應用...'\",
              \"docker-compose up -d --force-recreate\",
              \"echo '⏳ 等待服務啟動...'\",
              \"sleep 60\",
              \"echo '✅ 應用部署完成'\"
            ]" \
            --region ${{ secrets.AWS_REGION }} \
            --output text --query 'Command.CommandId')
          
          echo "⏳ 等待應用部署完成 (Command ID: $DEPLOY_CMD_ID)..."
          aws ssm wait command-executed \
            --command-id "$DEPLOY_CMD_ID" \
            --instance-id "${{ secrets.EC2_INSTANCE_ID }}" \
            --region ${{ secrets.AWS_REGION }}
          
          # 檢查部署結果
          DEPLOY_STATUS=$(aws ssm get-command-invocation \
            --command-id "$DEPLOY_CMD_ID" \
            --instance-id "${{ secrets.EC2_INSTANCE_ID }}" \
            --region ${{ secrets.AWS_REGION }} \
            --query 'Status' --output text)
          
          if [[ "$DEPLOY_STATUS" == "Success" ]]; then
            echo "✅ 應用部署成功"
          else
            echo "❌ 應用部署失敗"
            aws ssm get-command-invocation \
              --command-id "$DEPLOY_CMD_ID" \
              --instance-id "${{ secrets.EC2_INSTANCE_ID }}" \
              --region ${{ secrets.AWS_REGION }} \
              --query 'StandardErrorContent' --output text
            exit 1
          fi

      - name: 🧹 Post-deployment Tasks
        run: |
          echo "🧹 執行部署後任務..."
          
          POST_DEPLOY_CMD_ID=$(aws ssm send-command \
            --instance-ids "${{ secrets.EC2_INSTANCE_ID }}" \
            --document-name "AWS-RunShellScript" \
            --parameters commands="[
              \"cd /opt/app\",
              \"echo '🧹 清除 Laravel 缓存...'\",
              \"docker exec laravel-app php artisan config:clear 2>/dev/null || true\",
              \"docker exec laravel-app php artisan cache:clear 2>/dev/null || true\",
              \"docker exec laravel-app php artisan route:clear 2>/dev/null || true\",
              \"docker exec laravel-app php artisan view:clear 2>/dev/null || true\",
              \"echo '🔍 檢查環境變數加載狀況...'\",
              \"docker exec laravel-app env | grep -E '(APP_|DB_|REDIS_|AUTH_|JWT_|CACHE_|SESSION_|QUEUE_)' | sort || true\",
              \"echo '📊 檢查服務狀態...'\",
              \"docker-compose ps\",
              \"echo '🧹 清理舊映像...'\",
              \"docker image prune -af --filter 'until=24h'\",
              \"echo '✅ 部署後任務完成'\"
            ]" \
            --region ${{ secrets.AWS_REGION }} \
            --output text --query 'Command.CommandId')
          
          echo "⏳ 等待部署後任務完成 (Command ID: $POST_DEPLOY_CMD_ID)..."
          aws ssm wait command-executed \
            --command-id "$POST_DEPLOY_CMD_ID" \
            --instance-id "${{ secrets.EC2_INSTANCE_ID }}" \
            --region ${{ secrets.AWS_REGION }}
          
          # 檢查任務結果
          POST_STATUS=$(aws ssm get-command-invocation \
            --command-id "$POST_DEPLOY_CMD_ID" \
            --instance-id "${{ secrets.EC2_INSTANCE_ID }}" \
            --region ${{ secrets.AWS_REGION }} \
            --query 'Status' --output text)
          
          if [[ "$POST_STATUS" == "Success" ]]; then
            echo "✅ 部署後任務完成"
          else
            echo "⚠️ 部署後任務部分失敗（應用可能仍正常運行）"
            aws ssm get-command-invocation \
              --command-id "$POST_DEPLOY_CMD_ID" \
              --instance-id "${{ secrets.EC2_INSTANCE_ID }}" \
              --region ${{ secrets.AWS_REGION }} \
              --query 'StandardErrorContent' --output text
          fi

      - name: 🏥 Health Check
        run: |
          echo "🏥 執行健康檢查..."
          
          HEALTH_CHECK_CMD_ID=$(aws ssm send-command \
            --instance-ids "${{ secrets.EC2_INSTANCE_ID }}" \
            --document-name "AWS-RunShellScript" \
            --parameters commands="[
              \"cd /opt/app\",
              \"echo '🏥 開始健康檢查...'\",
              \"max_attempts=12\",
              \"attempt=0\",
              \"success=false\",
              \"while [ \\$attempt -lt \\$max_attempts ]; do\",
              \"  if curl -f http://localhost/health >/dev/null 2>&1; then\",
              \"    echo '✅ 應用健康檢查通過 (/health)'\",
              \"    success=true\",
              \"    break\",
              \"  elif curl -f http://localhost/api/v1/health-check >/dev/null 2>&1; then\",
              \"    echo '✅ API 健康檢查通過 (/api/v1/health-check)'\",
              \"    success=true\",
              \"    break\",
              \"  elif curl -f http://localhost >/dev/null 2>&1; then\",
              \"    echo '✅ 應用基本可用 (/)'\",
              \"    success=true\",
              \"    break\",
              \"  fi\",
              \"  attempt=\\$((attempt + 1))\",
              \"  echo '⏳ 健康檢查嘗試 '\\$attempt'/'\\$max_attempts'...'\",
              \"  sleep 10\",
              \"done\",
              \"if [ \\$success = false ]; then\",
              \"  echo '❌ 健康檢查失敗，檢查服務狀態...'\",
              \"  echo '=== Docker Compose 狀態 ==='\",
              \"  docker-compose ps\",
              \"  echo '=== App 容器日誌 (最後 20 行) ==='\",
              \"  docker-compose logs --tail=20 app || true\",
              \"  echo '=== Nginx 容器日誌 (最後 10 行) ==='\",
              \"  docker-compose logs --tail=10 nginx || true\",
              \"  echo '=== 檢查 .env 文件 ==='\",
              \"  ls -la .env\",
              \"  exit 1\",
              \"fi\",
              \"echo '🎉 健康檢查完成！'\"
            ]" \
            --region ${{ secrets.AWS_REGION }} \
            --output text --query 'Command.CommandId')
          
          echo "⏳ 等待健康檢查完成 (Command ID: $HEALTH_CHECK_CMD_ID)..."
          aws ssm wait command-executed \
            --command-id "$HEALTH_CHECK_CMD_ID" \
            --instance-id "${{ secrets.EC2_INSTANCE_ID }}" \
            --region ${{ secrets.AWS_REGION }}
          
          # 檢查健康檢查結果
          HEALTH_STATUS=$(aws ssm get-command-invocation \
            --command-id "$HEALTH_CHECK_CMD_ID" \
            --instance-id "${{ secrets.EC2_INSTANCE_ID }}" \
            --region ${{ secrets.AWS_REGION }} \
            --query 'Status' --output text)
          
          if [[ "$HEALTH_STATUS" == "Success" ]]; then
            echo "✅ 健康檢查通過"
            # 顯示健康檢查的詳細輸出
            aws ssm get-command-invocation \
              --command-id "$HEALTH_CHECK_CMD_ID" \
              --instance-id "${{ secrets.EC2_INSTANCE_ID }}" \
              --region ${{ secrets.AWS_REGION }} \
              --query 'StandardOutputContent' --output text
          else
            echo "❌ 健康檢查失敗"
            # 顯示錯誤信息
            aws ssm get-command-invocation \
              --command-id "$HEALTH_CHECK_CMD_ID" \
              --instance-id "${{ secrets.EC2_INSTANCE_ID }}" \
              --region ${{ secrets.AWS_REGION }} \
              --query 'StandardErrorContent' --output text
            exit 1
          fi

      - name: 🎉 Deployment Complete
        run: |
          echo ""
          echo "🎉 部署完成！"
          echo ""
          echo "📊 部署摘要："
          echo "✅ Docker 映像: ${{ steps.login-ecr.outputs.registry }}/${{ steps.config.outputs.ecr_repository }}:${{ github.sha }}"
          echo "✅ 目標實例: ${{ secrets.EC2_INSTANCE_ID }}"
          echo "✅ 部署區域: ${{ secrets.AWS_REGION }}"
          echo "✅ 健康檢查: 通過"
          echo ""
          echo "🔗 檢查狀態："
          echo "   SSH 到 EC2 執行: /opt/app/check-status.sh"
          echo "   或執行: /opt/app/test-ssm.sh"
          echo ""
          echo "📝 部署詳情："
          echo "   提交 SHA: ${{ github.sha }}"
          echo "   分支: ${{ github.ref_name }}"
          echo "   觸發者: ${{ github.actor }}"
          echo "   工作流程: ${{ github.run_number }}"