# .github/workflows/deploy.yml
name: Deploy Laravel to EC2

on:
  push:
    branches:
      - master

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔧 Parse Production Config
        id: config
        run: |
          # 從 PRODUCTION_ENV 中提取配置
          echo '${{ secrets.PRODUCTION_ENV }}' > /tmp/prod.env
          
          # 提取 EC2_HOST（用於後續步驟）
          EC2_HOST=$(grep '^EC2_HOST=' /tmp/prod.env | cut -d'=' -f2)
          echo "ec2_host=$EC2_HOST" >> $GITHUB_OUTPUT
          
          # 提取 ECR_REPOSITORY（用於構建）
          ECR_REPOSITORY=$(grep '^ECR_REPOSITORY=' /tmp/prod.env | cut -d'=' -f2)
          echo "ecr_repository=$ECR_REPOSITORY" >> $GITHUB_OUTPUT

      - name: 🔐 Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: 🐳 Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: 🏗️ Build, Tag, and Push Image to ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ steps.config.outputs.ecr_repository }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "🏗️ 構建 Docker 映像..."
          docker build --no-cache --pull -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          
          echo "📤 推送映像到 ECR..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          
          echo "✅ 映像推送完成"
          echo "image_uri=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: 📂 Upload Production Config to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ steps.config.outputs.ec2_host }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          source: "docker-compose.prod.yml,deployment/nginx.prod.conf"
          target: "/opt/app/"

      - name: 🚀 Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ steps.config.outputs.ec2_host }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          script: |
            cd /opt/app
            
            echo "🔐 登入 ECR..."
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | \
              docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}
            
            echo "⚙️ 設置環境變數..."
            # 直接使用完整的生產環境配置
            cat > .env << 'EOF'
            ${{ secrets.PRODUCTION_ENV }}
            
            # 動態添加 Docker 映像資訊
            ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
            IMAGE_TAG=${{ steps.build-image.outputs.image_uri }}
            EOF
            
            echo "📁 設置配置文件..."
            # 使用生產環境的 nginx 配置
            cp deployment/nginx.prod.conf nginx.conf
            
            # 使用生產環境的 docker-compose 配置
            cp docker-compose.prod.yml docker-compose.yml
            
            echo "📥 拉取新映像..."
            docker-compose pull
            
            echo "🔄 部署應用..."
            docker-compose up -d --force-recreate
            
            echo "⏳ 等待服務啟動..."
            sleep 45
            
            echo "🏥 健康檢查..."
            max_attempts=12
            attempt=0
            
            while [ $attempt -lt $max_attempts ]; do
              if curl -f http://localhost/health >/dev/null 2>&1; then
                echo "✅ 應用健康檢查通過"
                break
              elif curl -f http://localhost >/dev/null 2>&1; then
                echo "✅ 應用基本可用"
                break
              fi
              
              attempt=$((attempt + 1))
              echo "⏳ 健康檢查嘗試 $attempt/$max_attempts..."
              sleep 10
            done
            
            if [ $attempt -eq $max_attempts ]; then
              echo "❌ 健康檢查失敗，檢查服務狀態..."
              docker-compose ps
              docker-compose logs --tail=50 app
              exit 1
            fi
            
            echo "📊 最終服務狀態："
            docker-compose ps
            
            echo "🧹 清理舊映像..."
            docker image prune -af --filter "until=24h"
            
            echo "🎉 部署完成！"